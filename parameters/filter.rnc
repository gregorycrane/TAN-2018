default namespace = "tag:textalign.net,2015:ns"
namespace tan = "tag:textalign.net,2015:ns"

start = element alter-tan-file { phase-list?, alter+ }
# phases
phase-list = element phase-list { phase-item* & breakpoint? }
phase-item = element phase { attr-id }
breakpoint = element breakpoint { empty }
# alters
alter = element alter { self-conditions, action+ }
self-conditions = self-condition-attributes | self-condition-element+
self-condition-attributes = core-condition-attributes, self-specific-condition-attributes
core-condition-attributes =
    attr-node-name?, attr-evaluate?, attr-node-namespace?
self-specific-condition-attributes = attr-node-type-and-matches?, attr-phases? 
self-condition-element = element where { self-condition-attributes }
action = self-action | child-element-alter
self-action =
    element add-attributes { any-attribute*, attr-repl-ex? }
    | element append-content { any-content }
    | element prepend-content { any-content }
    | element append-siblings { any-content }
    | element prepend-siblings { any-content }
    | element rename { attr-new, attr-namespace? }
    | element replace { attr-pattern, attr-replacement, attr-flags? }
    | element skip {
          attribute shallow { xsd:boolean }?
      }
    | element wrap { attr-element-name, attr-namespace?, attr-namespace-prefix? }
child-element-alter = element children-elements { child-element-conditions, child-element-action }
child-element-conditions = core-condition-attributes
child-element-action = element group { attr-min-group-size, attr-adjacent?, attr-prepend-label? }
# attributes
attr-adjacent = attribute adjacent { xsd:boolean }
attr-element-name = attribute element-name { text }
attr-evaluate = 
## contains one or more evaluation expressions, i.e., XPath expressions enclosed in braces, with $p1 representing the context node
attribute evaluate { xsd:string { pattern = "\{[^\}]+\}( \{[^\}]+\})*"} }
attr-flags =
    attribute flags {
        xsd:string { pattern = "[smixq]+" }
    }
attr-id = attribute xml:id { xsd:ID }
attr-min-group-size = attribute min-group-size { xsd:integer }
attr-new = attribute new { text }
attr-namespace = attribute namespace { text }
attr-namespace-prefix = attribute namespace-prefix { text }
attr-node-matches = attribute node-matches { text }
attr-node-name = attribute node-name { text }
attr-node-namespace = attribute node-namespace { text }
attr-node-type =
    attribute node-type {
        xsd:string {
            pattern =
                "(attribute|element|text|comment|processing-instruction|document-node)( (attribute|element|text|comment|processing-instruction|document-node))*"
        }
    }
attr-node-type-and-matches = attr-node-type, attr-node-matches?
attr-pattern = attribute pattern { text }
attr-phases = attribute phases { xsd:IDREFS }
attr-prepend-label = attribute prepend-label { text }
attr-replacement = attribute replacement { text }
attr-repl-ex = attribute replace-existing { xsd:boolean }
# mixed content
any-content = any-element* & text*
any-element = element * { any-attribute*, any-content }
any-attribute = attribute * - (replace-existing | phases | xml:id) { text }
